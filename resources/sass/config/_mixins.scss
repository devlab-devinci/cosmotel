/*
 * Misc vars
 */

$transtimeG: 150ms; // (G)lobal - normal speed
$transtimeQ: 100ms; // (Q)uick
$transtimeQr: 50ms; // (Q)uick(er)

/*
 * Font mixins
 * Allow us to simply @include FontName in order to get every option right
 */
@mixin MainFont {
  font-family: $gfont, -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Helvetica Neue", arial, sans-serif;
  font-weight: 400; font-style: normal;
}
  
/*
 * Font-face mixin
 */

@mixin font-face($font-family, $file-path, $font-weight, $font-style) {
  @font-face{
    font-family: $font-family;
    font-display: auto;
    src: url('#{$file-path}');
    font-weight: $font-weight;
    font-style: $font-style;
  }
}

/*
 * Media queries mixins & variables
 * Those are based on CSS Bootstrap breakpoints
 */

$bs-sm: 370px;
$bs-md: 768px;
$bs-lg: 992px;
$bs-xl: 1300px;
// Custom breakpoints
$imac-width: 2560px;
// $classic-1920: 1920px;
$classic-1920: 1850px;
$macbookpro: 1440px;
$tablet-width: $bs-md;
$desktop-width: $bs-lg;
$desktop-large-width: $bs-xl;
@mixin small-mobile {
  @media (max-width: #{$bs-sm - 1px}) {
    @content;
  }
}
@mixin mobile {
  @media (max-width: #{$tablet-width - 1px}) {
    @content;
  }
}
@mixin tablet {
  @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {
    @content;
  }
}
// For tablets and all the way down
@mixin tabdown {
  @media (max-width: #{$desktop-width - 1px}) {
    @content;
  }
}

@mixin tabup {
  @media (min-width: #{$tablet-width}) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: #{$desktop-width}) and (max-width: #{$desktop-large-width - 1px}) {
    @content;
  }
}
// For desktop and all the way up
@mixin desktop-down {
  @media (max-width: #{$desktop-large-width - 1px}) {
    @content;
  }
}
@mixin desktop-large {
  @media (min-width: #{$desktop-large-width}) {
    @content;
  }
}
@mixin deskup {
  @media (min-width: #{$desktop-width}) {
    @content;
  }
}
@mixin mbpro {
  @media (min-width: #{$macbookpro}) {
    @content;
  }
}
@mixin classic1920 {
  @media (min-width: #{$classic-1920}) {
    @content;
  }
}
@mixin imac {
  @media (min-width: #{$imac-width}) {
    @content;
  }
}

/*
 * Transitions
 * Allow us to easily use transition, that mixin takes care of prefixes
 */

@mixin transition($transition-property, $transtimeG, $method) {
  -webkit-transition: $transition-property $transtimeG $method;
  -moz-transition: $transition-property $transtimeG $method;
  -ms-transition: $transition-property $transtimeG $method;
  -o-transition: $transition-property $transtimeG $method;
  transition: $transition-property $transtimeG $method;
}

/*
 * Box shadows
 * Set of various box-shadows I (randompiche) gathered through out my projects
 */

@mixin box_shadow ($level) {
  // Shadow from cosmo
  @if $level == 1 {
    -webkit-box-shadow: 0 3px 6px rgba(72,69,121,0.16);
    -moz-box-shadow: 0 3px 6px rgba(72,69,121,0.16);
    box-shadow: 0 3px 6px rgba(72,69,121,0.16);
  }
}

/*
 * REM (rem to px)
 * Allow us to work with rem and still respect design sizes (adode XD)
 */
 
$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;
@function rem-separator($list, $separator: false) {
	@if $separator=="comma" or $separator=="space" {
		@return append($list, null, $separator);
	}
	@if function-exists("list-separator")==true {
		@return list-separator($list);
	} // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
	$test-list: ();
	@each $item in $list {
		$test-list: append($test-list, $item, space);
	}
	@return if($test-list==$list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
	font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
	$result: ();
	$separator: rem-separator($values);
	@each $value in $values {
		@if type-of($value)=="number" and unit($value)=="rem" and $to=="px" {
			$result: append($result, $value / 1rem * $rem-baseline + 0px, $separator);
		}
		@else if type-of($value)=="number" and unit($value)=="px" and $to=="rem" {
			$result: append($result, $value / $rem-baseline + 0rem, $separator);
		}
		@else if type-of($value)=="list" {
			$value-separator: rem-separator($value);
			$value: rem-convert($to, $value...);
			$value: rem-separator($value, $value-separator);
			$result: append($result, $value, $separator);
		}
		@else {
			$result: append($result, $value, $separator);
		}
	}
	@return if(length($result)==1, nth($result, 1), $result);
}

@function rem($values...) {
	@if $rem-px-only {
		@return rem-convert(px, $values...);
	}
	@else {
		@return rem-convert(rem, $values...);
	}
}

@mixin rem($properties, $values...) {
	@if type-of($properties)=="map" {
		@each $property in map-keys($properties) {
			@include rem($property, map-get($properties, $property));
		}
	}
	@else {
		@each $property in $properties {
			@if $rem-fallback or $rem-px-only {
				#{$property}: rem-convert(px, $values...);
			}
			@if not $rem-px-only {
				#{$property}: rem-convert(rem, $values...);
			}
		}
	}
}